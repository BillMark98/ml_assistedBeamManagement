[basic]
scen_idxs = [1] 
n_reps = 1
# These scenarios needed calibration.
use_cal_pos_for_scen = [3,4,8,9]
# number of runs to average
n_avgs = 1
# 0 on val uses test set to validate.    
train_val_test_split = [60,20,20]
totalBeams = 5
# the run folder 
RUNS_FOLDER = ""
SAVE_DATA_FILENAME = ""
# When >= 0, sets data randimzation 
# seed. Useful for data probing.
# Otherwise, seed = run_idx.
force_seed = -1
; bm_method = "pos"
bm_method = "deepIA"
data_folder = "/storage/archive/Panwei/DATA/data"

[KNN]
# number of neighbors
n_knn = 5
use_best_n_knn = False
# BEST_N_PER_SCENARIO_KNN = \
#     [5,predTxNum,65,28,9,5,13,80,54]         # best n measured in each scenario
                

[Lookup_Table]
n_lookuptable = 25                    
# number of divisions of each coordinate
use_best_n_lookuptable = False         
# if True, ignores the value above.
BEST_N_PER_SCENARIO_TAB = [62,40,27,22,30,33,27,20,27]
# best n measured in each scenario

[data]
dataMatrixName = "data_frankfurt_TX3054566_rx4tx16_totalRSS_best_removeDead5.csv"
totalDataMatrixName = "data_frankfurt_TX3054566_rx4tx16_totalRSS_best_removeDead5.csv"
saveFolderName = "oct15_deepIA_rankfurt_TX5194466_trained_tf_TX3054566_rx16tx64_removeDead"
# Variables to loop
# ai_strategies = ['KNN']       # 'KNN', 'LT', 'NN'
# ai_strategies = ['KNN', 'LT', 'NN']       # 'KNN', 'LT', 'NN'
# 'KNN', 'LT', 'NN'
ai_strategies = ["NN"]
# [1,2,3,4,5]
; norm_types = [6]                     
# bound min_max normalization
# norm_types = [6]                     # [1,2,3,4,5,6]
norm_types = [1]                     # [1,2,3,4,5,6]
[pos_params]
arr_min = 0
arr_max = 750
[rss_params]
arr_min = -174
arr_max = -37
[params]

bandwidth=800e6
dropOutage=True

loadModel = True
loadModelPath = "saved_folder/results_1698311174.3077595/scenario1beams1024norm1noise0trainM1_name_MultiStepLRT_[20, 40]gamma_0.2optim_Adamlr_0.01weight_decay_1e-05/NN_nodes_128_layers_5_batch_1024_lr0.02_decayL2_1e-05/"

[setup]
; n_beams_list = [16 * 16]          
n_beams_list = [16 * 64]          
; n_beams_list = [16*64]          
predTxNum = 64
predRxNum = 16
txNum = 64
# because each direction only read one for reproduction
rxNum = 16

; currnetly no use just for legacy
extractTxNum = 1
extractRxNum = 1

[prediction_map]

N = 10000
knn_num_neighbors = 6
lt_predition_per_bin = 100
# M val
# rxIndexMax = 64
rxIndexMax = 16
M_max = rxIndexMax - 1
M_start = 0

[noise]
# position noise in meters
noises = [0]                         

# Variables constant across simulation
# max samples to consider per scenario
max_samples = 1000000                     
# n_avgs = 5                            # number of runs to average
# train_val_test_split = [4,4,4]     # 0 on val uses test set to validate.    
# train_val_test_split = [10,10,10]     # 0 on val uses test set to validate.    

# top_beams = np.arange(5) + 1          # Collect stats for Top X predictions
; top_beams = np.array([1,2,3,4,5])
top_beams = [1,2,3,4,5]
# top_beams = np.array([1])

n_bins = None
bin_size = None
prediction_per_bin = None
                                      
[Hyperparameters.NN]
# Neural Network
# nodes in each fully connected layer
nodes_per_layer = 128                 
# nodes_per_layer = 256                 # nodes in each fully connected layer
# number of layers (must be >=2)
layers = 3 + 2                        
# train_batch_size = 32                 # samples in train batch

[train]
# samples in train batch
train_batch_size = 1024                 
# initial learning rate in Adam Optimizer 
lr = 0.02                             
# lr = 0.001                             # initial learning rate in Adam Optimizer 
# L2 regularizer weights
decay_L2 = 1e-5                       
# Number of epochs (no callback enabled)
# Number of epochs (no callback enabled)
num_epochs = 60

; # lr scheduler
; lr_scheduler="cosineAnneal"
; lr_scheduleParams= dict()
; lr_scheduleParams["name"] = "cosineAnneal"
; lr_scheduleParams["opt_lr_init"] = 4e-2
; lr_scheduleParams["T_0"] = 5
; lr_scheduleParams["T_mult"] = 1
; lr_scheduleParams["eta_min"] = 2e-2

; lr_schedulers = ["cosineAnneal"]

lr_scheduleParamArr = [{"name":"MultiStepLR", "T": [20,40],"gamma":0.2, "optim":"Adam", "lr":0.01, "weight_decay": decay_L2}]

trainModes = [1]
# beamWeight = [0.5,0.2,0.2,0.05,0.05]
# beamWeight = [1,0,0,0,0]
beamWeight = [0.5,0.2,0.15,0.075,0.075]
; bestBeamNum = len(beamWeight)
chooseLastEpochTrain = False
AddAverage = False
plotData = False
# beamWeight = [1,0,0,0,0] # default crossEntropyLoss

# training input quantization bins (NN)
n_bins = 200                          
# if False, ignores the value above.
quantize_input = True                 



[Plots]
stats_on_data = False
data_probing_plots = False
lookup_table_plots = False
evaluate_predictors = False
plot_prediction_map = False

; combinations = list(itertools.product(scen_idxs, n_beams_list, norm_types, 
;                                       noises, [1 for i in range(n_reps)], trainModes, lr_scheduleParamArr))




; sfs_beamSet = set()
# sfs_beamSet = set([15,10])
# sfs_beamSet = set([1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 16])
# rxBeamSeq = [] # incrementally added rx beam index
# incrementally added rx beam index
rxBeamSeq = [] 
# rxBeamSeq = [15,10] # incrementally added rx beam index
# algos = ["MSB"]
; algos = ["SFS"]
algos = ["SFS","MSB"]
rxBeamPreSeq = [21, 1, 22, 20, 4, 19, 23, 14, 18, 10, 16, 13, 2, 15, 12, 6, 7, 8, 11, 17, 9, 3, 5]

findLR = False
findLR_init_value = 1e-2
findLR_final_value = 1
findLR_train_batch_size = 128

testEachModel = False
# rxBeamSeq = [1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 16]
# incrementally add best model saved path
bestModelPathSeq = [] 
# bestModelPathSeq = ["C:\\Users\\Panwei\\Desktop\\summer23\\summer23\\masterArbeit\\deepIA\\saved_folder\\results_1689166693.4708714\\scenario1beams1024norm1noise0trainM1\\NN_nodes_128_layers_5_batch_32_lr0.01_decayL2_1e-05\\M_0\\b3\\model_checkpoint\\nn_beam_pred3", "C:\\Users\\Panwei\\Desktop\\summer23\\summer23\\masterArbeit\\deepIA\\saved_folder\\results_1689166693.4708714\\scenario1beams1024norm1noise0trainM1\\NN_nodes_128_layers_5_batch_32_lr0.01_decayL2_1e-05\\M_1\\b14\\model_checkpoint\\nn_beam_pred14"]
# rxSet = set(list(range(1,2))) # index start from 1
# rxSet = set(list(range(1,predTxNum))) # index start from 1
# rxSet = set(list(range(1,24))) # index start from 1
; rxSet = set(list(range(1,rxIndexMax))) # index start from 1